const wppconnect = require('@wppconnect-team/wppconnect');

var userStages = [];


wppconnect.create({
    session: 'whatsbot',
    autoClose: false,
    puppeteerOptions: { args: ['--no-sandbox'] }
})
    .then((client) =>
        client.onMessage((message) => {
            console.log('Mensagem digitada pelo usu√°rio: ' + message.body);
            stages(client, message);
        }))
    .catch((error) =>
        console.log(error));


async function stages(client, message) {

    if (message.isGroupMsg === false) {

        stage = userStages[message.from];

        stage = userStages[message.from];


        switch (stage) {

            case 'option':
                if (message.body == 'Sim' || message.body == 'SIM' || message.body == 'sim' || message.body == 'Voltar' || message.body == 'VOLTAR' || message.body == 'voltar') {
                    sendWppMessage(client, message.from, 'Digite o numero da op√ß√£o que deseja saber:');
                    sendWppMessage(client, message.from, `*1* - Empresas convidadasüë®üèø‚Äçüíº`);
                    sendWppMessage(client, message.from, '*2* - Cursos integradosüë®üèø‚Äçüéì');
                    sendWppMessage(client, message.from, '*3* - Cantina/Lanchoneteüç±');
                    sendWppMessage(client, message.from, '*4* - Outras exposi√ß√µes');
                    sendWppMessage(client, message.from, '*5* - Exposi√ß√µes de Cada Sala e Andarüè¢');
                    userStages[message.from] = 'Nome'
                }
                else if(message.body == 'Nao' || message.body == 'NAO' || message.body == 'nao' || message.body == 'N√£o' || message.body == 'N√ÉO' || message.body == 'n√£o'){
                    sendWppMessage(client, message.from, 'Fim');
                }
                break;

            case 'Nome':
                if(message.body == '1'){
                    sendWppMessage(client, message.from, 'Para ver as outras op√ß√µes digite *Voltar*');
                    sendWppMessage(client, message.from, `‚Ä¢Fios de Berenice: Corte de Mecha de Cabelo
‚Ä¢Universidade √çtalo-Brasileiro
‚Ä¢UNISA
‚Ä¢STB Interc√¢mbio 
‚Ä¢Instituto ITM√≠dia
‚Ä¢Nutricionista (Daniela Matos)
‚Ä¢S√£o Paulo Open Centre`);
                    
                        userStages[message.from] = 'option';
                }
              else if(message.body == '2'){
                    sendWppMessage(client, message.from, 'Para ver as outras op√ß√µes digite *Voltar*');
                    sendWppMessage(client, message.from, `‚Ä¢Inform√°ticaüë©‚Äçüíª
‚Ä¢Administra√ß√£oüë®‚Äçüíº
‚Ä¢Eletrot√©cnicaüë©‚Äçüè≠
‚Ä¢Eletromec√¢nicaüë®‚Äçüîß
‚Ä¢Comunica√ß√£o Visualüë®üèª‚Äçüé®
‚Ä¢Secretariado‚úçüèº
‚Ä¢Ingl√™süá∫üá≤`);
                    userStages[message.from] = 'option';
                }
                else if(message.body == '3'){
                    sendWppMessage(client, message.from, 'Para ver as outras op√ß√µes digite *Voltar*');
                    sendWppMessage(client, message.from, 'Digite o n√∫mero da op√ß√£o que deseja saber');
                    sendWppMessage(client, message.from, `Card√°pioüìã:
1.Docesü•Ø
2.Salgadosüçï
3.BebidasüßÉ

                    `); 

                    userStages[message.from] = 'Cardapio';
                    

                    
                }

                else if(message.body == '4'){
                    sendWppMessage(client, message.from, 'Para ver as outras op√ß√µes digite *Voltar*');
                    sendWppMessage(client, message.from, `‚Ä¢CEDESP AVE MARIA
    ‚Ä¢Assistente Administrativo
    ‚Ä¢Log√≠stica
    ‚Ä¢Metalmec√¢nica ‚Äì Ajustador e Torneiro Mec√¢nico
    ‚Ä¢Tecnologia de Redes e Manuten√ß√£o de Computadores
‚Ä¢Troca de Livros 
‚Ä¢Oficina de Eletromec√¢nica de Autos
‚Ä¢Oficina de Auto El√©trica
‚Ä¢Oficina Eletrot√©cnica
‚Ä¢Livros do Frei
`

                    );
                    userStages[message.from] = 'option';
                }

                else if(message.body == '5'){
                    sendWppMessage(client, message.from, 'Para ver as outras op√ß√µes digite *Voltar*');
                    sendWppMessage(client, message.from, `Salas:
    ‚Ä¢Sala 4: √ìtica Brauzo
    ‚Ä¢Sala 5: Apresenta√ß√£o de Cursos
    ‚Ä¢Sala 6: Bate-papo sobre a escolha de posi√ß√µes

1¬∞ ANDAR:
    ‚Ä¢Sala 17: Posto Sa√∫de
    ‚Ä¢Sala 18: ADM: RH e POC
    ‚Ä¢Sala 19: Empreendedorismo e Log√≠stica (Acelerados)
    ‚Ä¢Sala 20: Ingl√™s: Teste conhencimento

2¬∞ ANDAR:
    ‚Ä¢Sala 24: Comunica√ß√£o Visual
    ‚Ä¢Sala 25: Inform√°tica: Montagem, Configura√ß√£o e Redes
    ‚Ä¢Sala 26: Inform√°tica: Programa√ß√£o
    ‚Ä¢Sala 27: Elabora√ß√£o de curr√≠culo

3¬∞ ANDAR:
    ‚Ä¢Audit√≥rio: Cate e Simula√ß√£o de entrevista
    ‚Ä¢Audit√≥rio: SAS (Cad √önico)
    ‚Ä¢Sala 33: Linkedin
`

                    );
                    userStages[message.from] = 'option';
                }


                

                


                break;

                case 'Cardapio':
                    if(message.body == '1'){
                        sendWppMessage(client, message.from, `Doces:
1.Sonho(creme, chocolate e doce de leite)
2.Bolo(chocolate)
                                                        
                 `); 
                    }

                    else if(message.body == '2'){
                        sendWppMessage(client, message.from, `Salgados:
1.Mini Pizza
2.Croissant
3.Baguete Recheada
4.Hamb√∫rguer
                    `)}

                    else if(message.body == '3'){
                        sendWppMessage(client, message.from, `Bebidas:
1.√Ägua
2.Caf√©
3.Coca-cola
4.Sprite`
                   )}



                break;









            case 'Fim':
                    sendWppMessage(client, message.from, 'Fim');
                break;





            default: 


                console.log('*Usu√°rio atual* from:' + message.from);



                sendWppMessage(client, message.from, `Ola, seja bem vindo ao assistente da feira de profiss√µes do curso, estou aqui para fornecer informa√ß√µes sobre a feira.
                    Quer continuar? *SIM* ou *N√ÉO*`);

                userStages[message.from] = 'option'



        }


    }

    else {
        console.log('Mensagem recebida de um grupo. N√£o ser√° processada.');
    }

}


function sendWppMessage(client, sendTo, text) {
    client
        .sendText(sendTo, text)
        .then((result) => {
            // console.log('SUCESSO: ', result); 
        })
        .catch((erro) => {
            console.error('ERRO: ', erro);
        });
}



//mudan√ßa